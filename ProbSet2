{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a03ecdcd-056e-4cdd-96a9-208ec59f1d28",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Programming Set 2\n",
    "#This assignment will develop your proficiency with Python's control flows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "0e4f036f-6909-4eae-b9aa-a415259710fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Shift Letter\n",
    "alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "def shift_letter(letter, shift):\n",
    "    if letter==\" \":\n",
    "        return(\" \")\n",
    "    else:\n",
    "        new_letter= (alphabet.find(letter)+shift)%26\n",
    "        return(alphabet[new_letter])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "96284a9c-e3bf-4f38-a4da-20d443056d7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Caesar Cipher\n",
    "alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "\n",
    "def caesar_cipher(message, shift):\n",
    "    string_list=\"\"\n",
    "    for i in message:\n",
    "        if i==\" \":\n",
    "            string_list+=(\" \")\n",
    "        else:\n",
    "            index= (alphabet.find(i)+shift)%26\n",
    "            string_list+=(alphabet[index])\n",
    "    return(string_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "cd8681e7-9540-4b33-b5f5-b2a3c8c7111a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Shift By Letter\n",
    "alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "def shift_by_letter(letter, letter_shift):\n",
    "    if letter==\" \":\n",
    "        return(\" \")\n",
    "    else:\n",
    "        new_index=(alphabet.find(letter)+alphabet.find(letter_shift))%26\n",
    "        return(alphabet[int(new_index)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "9fc0988a-ff36-4fde-82a3-304e6fb750c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vigenere Cipher\n",
    "alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "def vigenere_cipher(message, key):\n",
    "    new_keylist=[]\n",
    "    string_list=[]\n",
    "    while len(new_keylist)<len(message):\n",
    "        for i in range(0,len(message)):\n",
    "            new_keylist+=(key[i%len(key)])\n",
    "        break\n",
    "\n",
    "    for j in range(0,len(message)):\n",
    "        if message[j]==\" \":\n",
    "            string_list+=\" \"\n",
    "        else:\n",
    "            index=(alphabet.find(message[j])+alphabet.find(new_keylist[j]))%26\n",
    "            string_list+=alphabet[index]\n",
    "    return(\"\".join(string_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "af877153-61b2-4432-9eb1-79ee76d4de8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scytale Cipher\n",
    "def scytale_cipher(message, shift):\n",
    "    while len(message)%shift!=0:\n",
    "        message+=\"_\"\n",
    "    message_list=[]\n",
    "    for i in range(0,len(message)):\n",
    "        message_list+=message[(i // shift) + (len(message) // shift) * (i % shift)]\n",
    "    return(\"\".join(message_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "cdc9446b-435d-415c-a98b-d875573159b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scytale De-cipher\n",
    "def scytale_decipher(message, shift):\n",
    "    message_list=[]\n",
    "    col=int(len(message)/shift)\n",
    "    for i in range(0,shift):\n",
    "        for j in range(0, col):\n",
    "            message_list+=message[i+shift*j]\n",
    "    return(\"\".join(message_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc04592-d5ab-461b-83be-d480a38747ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
